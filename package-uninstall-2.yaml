---
- name: Stop and fully remove nginx on agent servers
  hosts: agent_servers
  gather_facts: true
  become: true
  vars_files:
    - vars/agents.yaml
    - vars/vault.yaml   # remove if you're not using it

  vars:
    nginx_packages_common:
      - nginx
      - nginx-core
      - nginx-common
      - nginx-full
      - nginx-light
      - nginx-extras

  tasks:
    # ----- Update package caches per OS -----
    - name: Update apt package index (Debian/Ubuntu)
      ansible.builtin.apt:
        update_cache: true
      when: ansible_facts['os_family'] == "Debian"

    - name: Update dnf/yum metadata (RHEL)
      ansible.builtin.yum:
        update_cache: true
      when: ansible_facts['os_family'] == "RedHat"

    # ----- Service facts to decide if we need to stop it -----
    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: Stop nginx if present
      ansible.builtin.service:
        name: "{{ package_service | default('nginx') }}"
        state: stopped
        enabled: false
      when: "'%s.service' % (package_service | default('nginx')) in ansible_facts.services"

    # ----- Remove packages per OS -----
    # Debian/Ubuntu: purge (remove config) + autoremove
    - name: Purge nginx packages (Debian/Ubuntu)
      ansible.builtin.apt:
        name: "{{ nginx_packages_common }}"
        state: absent
        purge: true
        autoremove: true
      when: ansible_facts['os_family'] == "Debian"

    - name: Purge any remaining nginx* packages (Debian/Ubuntu best-effort)
      ansible.builtin.apt:
        name: "nginx*"
        state: absent
        purge: true
        autoremove: true
      when: ansible_facts['os_family'] == "Debian"
      ignore_errors: true

    # RHEL: remove packages (no 'purge' concept)
    - name: Remove nginx packages (RHEL)
      ansible.builtin.yum:
        name:
          - nginx
          - nginx-all-modules
          - nginx-mod-*
        state: absent
      when: ansible_facts['os_family'] == "RedHat"

    - name: Remove any remaining nginx* packages (RHEL best-effort)
      ansible.builtin.yum:
        name: "nginx*"
        state: absent
      when: ansible_facts['os_family'] == "RedHat"
      ignore_errors: true

    # ----- Clean up units/config/logs on both families -----
    - name: Remove nginx systemd unit and drop-ins if present
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/systemd/system/nginx.service
        - /etc/systemd/system/nginx.service.d
        - /lib/systemd/system/nginx.service          # Debian/Ubuntu
        - /usr/lib/systemd/system/nginx.service      # RHEL
      ignore_errors: true

    - name: Remove nginx config and logs
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/nginx
        - /var/log/nginx
      ignore_errors: true

    # ----- Refresh systemd -----
    - name: Reset failed units
      ansible.builtin.command: systemctl reset-failed
      changed_when: false
      failed_when: false

    - name: Reload systemd units
      ansible.builtin.command: systemctl daemon-reload
      changed_when: false

    # ----- Verify (wonâ€™t fail the play) -----
    - name: Check nginx status (expect 'Unit nginx.service could not be found')
      ansible.builtin.command: systemctl status nginx
      register: nginx_status
      changed_when: false
      failed_when: false

    - name: Show nginx status result
      ansible.builtin.debug:
        var: nginx_status.stdout_lines

